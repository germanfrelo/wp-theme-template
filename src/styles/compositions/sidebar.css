/* ======================================================================
SIDEBAR

A layout for placing two elements side-by-side.
If space permits, the sidebar element has a set width, and the companion takes up the rest of the available horizontal space.
If not, the elements are collapsed into a single column, each taking up 100% of the horizontal space.

Source:
- https://every-layout.dev/layouts/sidebar/
- https://piccalil.li/blog/a-revisit-of-the-every-layout-sidebar-with-has-and-selector-performance/

Usage:
To use this layout, simply add the '.sidebar' class to the specific element you want to designate as the sidebar.
The layout will then be applied to this element's direct parent container, arranging it alongside its sibling elements.

Configuration:
--gutter
	Description: The gap between the two elements.
	Type:        A valid 'gap' value.
	Default:     var(--gutter, 1em)
--sidebar-container-align-items
	Description: The block size (height) of the two adjacent elements.
	Type:        A valid 'align-items' value.
	Default:     normal (= 'stretch' for Flexbox)
--sidebar-size
	Description: How large the sidebar should be before wrapping.
	Type:        A valid 'flex-basis' value except percentage.
	Default:     auto
--sidebar-wrap-at
	Description: The narrowest the content (non-sidebar) element can be before wrapping.
	Type:        A percentage value, relative to the container's inline size.
	Default:     50% (wrap when the elements are of equal width)
====================================================================== */

*:has(> .sidebar) {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	gap: var(--gutter, 1em);
	align-items: var(--sidebar-container-align-items, normal);
}

.sidebar {
	flex-grow: 1;
	flex-basis: var(--sidebar-size, auto);
}

*:has(> .sidebar) > *:not(.sidebar) {
	flex-grow: 999;
	flex-basis: var(--sidebar-wrap-at, 50%);
}
