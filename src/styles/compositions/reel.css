/* ======================================================================
REEL

A layout for creating a horizontally scrolling container for elements that maintain their intrinsic height.

References:
* https://every-layout.dev/layouts/reel/
* https://developer.chrome.com/docs/css-ui/scrollbar-styling
* https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-color
* https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-width
* https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar

Configuration:
--reel-height (auto): The height of the Reel itself.
--reel-height-max (99svb): The maximum height of the Reel itself.
--reel-item-width (auto): The width of each item (child element) in the Reel.
--reel-items-gap (var(--gutter, 1em)): The space between Reel items (child elements).
--reel-padding (0): The space between the Reel items and the Reel itself.
--reel-scrollbar-offset (var(--gutter, 1em)): The space between Reel items and the scrollbar.
--scrollbar-thumb-color (auto): The color of the scrollbar thumb (the moving part).
--scrollbar-thumb-color-hover (auto)
--scrollbar-track-color (auto): The color of the scrollbar track (the background).
--scrollbar-track-color-hover (auto): The color of the scrollbar track (the background) on hover.
Chrome/Edge & Firefox only:
--scrollbar-width (auto): The thicknesss of the scrollbar as 'auto' | 'thin' | 'none'.
Safari only:
--scrollbar-thumb-radius (0): The radius of the scrollbar thumb.
--scrollbar-track-radius (0): The radius of the scrollbar track.
--scrollbar-width-legacy (auto): The thicknesss of the scrollbar as length.
====================================================================== */

.reel {
	display: flex;
	flex-direction: row;
	flex-wrap: nowrap;
	gap: var(--reel-items-gap, var(--gutter, 1em));
	block-size: var(--reel-height, auto);
	max-block-size: var(--reel-height-max, 99svb);
	padding: var(--reel-padding, 0);
	padding-block-end: var(--reel-scrollbar-offset, var(--gutter, 1em));
	overflow-x: auto;
	overflow-y: hidden;
	overscroll-behavior: contain;

	> * {
		flex-grow: 0;
		flex-shrink: 0;
		flex-basis: var(--reel-item-width, auto);
	}

	> :is(img, figure:has(> img), ) {
		flex-basis: auto;
		inline-size: auto;
		block-size: 100%;
	}

	> figure > img {
		inline-size: auto;
		block-size: 100%;
	}
}

/* For browsers that support 'scrollbar-*' properties */
@supports (scrollbar-color: auto) {
	.reel {
		scrollbar-color: var(--scrollbar-thumb-color, auto) var(--scrollbar-track-color, auto);
		scrollbar-width: var(--scrollbar-width, auto);

		&:hover {
			scrollbar-color: var(--scrollbar-thumb-color-hover, auto) var(--scrollbar-track-color-hover, auto);
		}
	}
}

/* Otherwise, use '::-webkit-scrollbar-*' pseudo-elements */
@supports selector(::-webkit-scrollbar) {
	.reel::-webkit-scrollbar {
		block-size: var(--scrollbar-width-legacy, auto);
	}

	.reel::-webkit-scrollbar-thumb {
		background-color: var(--scrollbar-thumb-color, auto);
		border-radius: var(--scrollbar-thumb-radius, 0);
	}

	.reel::-webkit-scrollbar-track {
		background-color: var(--scrollbar-track-color, auto);
		border-radius: var(--scrollbar-track-radius, 0);
	}

	.reel::-webkit-scrollbar-thumb:hover {
		background-color: var(--scrollbar-thumb-color-hover, auto);
	}
}
