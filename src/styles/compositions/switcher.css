/* ======================================================================
SWITCHER

A layout for dynamically switching between horizontal and vertical arrangement of items based on available container width.

Reference: https://every-layout.dev/layouts/switcher/

Configuration:
--gutter (var(--space-s-l, 1em)): This defines the space between each item.
--switcher-horizontal-alignment (unset): How items should align horizontally. Can be any acceptable flexbox alignment value.
--switcher-vertical-alignment (unset): How items should align vertically. Can be any acceptable flexbox alignment value.
--switcher-target-container-width (40rem): How large *the container* needs to be to allow items to sit inline with each other.
====================================================================== */

.switcher,
.switcher-2,
.switcher-3 {
	display: flex;
	flex-wrap: wrap;
	gap: var(--switcher-gap, var(--gutter, var(--space-s-l, 1em)));
	align-items: var(--switcher-vertical-alignment, unset);
	justify-content: var(--switcher-horizontal-alignment, unset);
}

:is(.switcher, .switcher-2, .switcher-3) > * {
	flex-grow: 1;
	flex-basis: calc((var(--switcher-target-container-width, 40rem) - 100%) * 999);
	max-inline-size: 100%;
	margin: 0;
}

/* Max 2 items, so anything greater than 2 is full width */
:is(.switcher-2, .switcher:is(:not([data-limit]), [data-limit="2"])) > :nth-last-child(n + 3),
:is(.switcher-2, .switcher:is(:not([data-limit]), [data-limit="2"])) > :nth-last-child(n + 3) ~ * {
	flex-basis: 100%;
}

/* Max 3 items, so anything greater than 3 is full width */
:is(.switcher-3, .switcher[data-limit="3"]) > :nth-last-child(n + 4),
:is(.switcher-3, .switcher[data-limit="3"]) > :nth-last-child(n + 4) ~ * {
	flex-basis: 100%;
}
